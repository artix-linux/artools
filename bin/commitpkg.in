#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'
DATADIR='@datadir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh

to_staging(){
    local tree="$1" pkg="$2" repo="$3"
    cd ${tree_dir_artix}/$tree/$pkg
    source trunk/PKGBUILD
    [[ $arch == 'any' ]] && CARCH=any
    cd repos
    git mv $repo-$CARCH staging-$CARCH
    cd ..
    git add .
    git commit -m "Move '$pkg' [$repo] -> [staging]"
    ${push} && git push origin master
}

to_testing(){
    local tree="$1" pkg="$2" repo="$3"
    cd ${tree_dir_artix}/$tree/$pkg
    source trunk/PKGBUILD
    [[ $arch == 'any' ]] && CARCH=any
    cd repos
    git mv $repo-$CARCH testing-$CARCH
    cd ..
    git add .
    git commit -m "Move '$pkg' [$repo] -> [testing]"
    ${push} && git push origin master
}

to_repo(){
    local tree="$1" pkg="$2" repo="$3"
    cd ${tree_dir_artix}/$tree/$pkg
    source trunk/PKGBUILD
    [[ $arch == 'any' ]] && CARCH=any
    cd repos
    git rm -r $repo-$CARCH
    git mv testing-$CARCH $repo-$CARCH
    cd ..
    git add .
    git commit -m "Move '$pkg' [testing] -> [$repo]"
    ${push} && git push origin master
}

to_new(){
    local tree="$1" pkg="$2" repo="$3"
    cd ${tree_dir_artix}/$tree/$pkg
    source trunk/PKGBUILD
    [[ $arch == 'any' ]] && CARCH=any
    [[ ! -d repos ]] && mkdir repos
    cp -r trunk repos/$repo-$CARCH
    git add .
    git commit -m "Update '$pkg' [$repo]"
    ${push} && git push origin master
}

commit_pkg(){
    local tree="$1" pkg="$2" repo="$3"
    cd ${tree_dir_artix}/$tree/$pkg
    git add .
    git commit -m "Update '$pkg' [$repo]"
    ${push} && git push origin master
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "git_tree: %s" "${git_tree}"
    msg2 "repository: %s" "${repository}"
    msg2 "package: %s" "${package}"

    msg "ARGS:"
    msg2 "move_staging: %s" "${move_staging}"
    msg2 "move_testing: %s" "${move_testing}"
    msg2 "move_repo: %s" "${move_repo}"
    msg2 "move_new: %s" "${move_new}"
    msg2 "commit: %s" "${commit}"
    msg2 "push: %s" "${push}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

repository='core'
package=''
git_tree='packages'
move_staging=false
move_testing=false
move_repo=false
move_new=false
commit=false
push=false
pretend=false

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -g                 Git repository [default:${git_tree}]"
    echo "    -r                 Repository [default:${repository}]"
    echo "    -p                 Package name [default:${package}]"
    echo '    -z                 Move package to staging repo'
    echo '    -y                 Move package to testing repo'
    echo '    -x                 Move package from testing to repo'
    echo '    -n                 New repo package from trunk'
    echo '    -c                 Commit a package to repo'
    echo '    -u                 Push'
    echo '    -q                 Query settings and pretend'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:r:g:nucxyzqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        r) repository="$OPTARG" ;;
        p) package="$OPTARG" ;;
        g) git_tree="$OPTARG" ;;
        z) move_staging=true ;;
        y) move_testing=true ;;
        x) move_repo=true ;;
        n) move_new=true ;;
        c) commit=true ;;
        u) push=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

${pretend} && display_settings && exit 1

${move_staging} && to_staging "${git_tree}" "${package}" "${repository}"

${move_testing} && to_testing "${git_tree}" "${package}" "${repository}"

${move_repo} && to_repo "${git_tree}" "${package}" "${repository}"

${move_new} && to_new "${git_tree}" "${package}" "${repository}"

${commit} && commit_pkg "${git_tree}" "${package}" "${repository}"
